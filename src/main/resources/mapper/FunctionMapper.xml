<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hz.dao.FunctionMapper" >
  <resultMap id="BaseResultMap" type="com.hz.domain.Function" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="function_name" property="functionName" jdbcType="VARCHAR" />
    <result column="permission_name" property="permissionName" jdbcType="VARCHAR" />
    <result column="pid" property="pid" jdbcType="INTEGER" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="level" property="level" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, function_name, permission_name, pid, url, level, create_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from s_function
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from s_function
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hz.domain.Function" >
    insert into s_function (id, function_name, permission_name,
      pid, url, level, create_time
      )
    values (#{id,jdbcType=INTEGER}, #{functionName,jdbcType=VARCHAR}, #{permissionName,jdbcType=VARCHAR}, 
      #{pid,jdbcType=INTEGER}, #{url,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hz.domain.Function" >
    insert into s_function
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="functionName != null" >
        function_name,
      </if>
      <if test="permissionName != null" >
        permission_name,
      </if>
      <if test="pid != null" >
        pid,
      </if>
      <if test="url != null" >
        url,
      </if>
      <if test="level != null" >
        level,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="functionName != null" >
        #{functionName,jdbcType=VARCHAR},
      </if>
      <if test="permissionName != null" >
        #{permissionName,jdbcType=VARCHAR},
      </if>
      <if test="pid != null" >
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="url != null" >
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        #{level,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hz.domain.Function" >
    update s_function
    <set >
      <if test="functionName != null" >
        function_name = #{functionName,jdbcType=VARCHAR},
      </if>
      <if test="permissionName != null" >
        permission_name = #{permissionName,jdbcType=VARCHAR},
      </if>
      <if test="pid != null" >
        pid = #{pid,jdbcType=INTEGER},
      </if>
      <if test="url != null" >
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hz.domain.Function" >
    update s_function
    set function_name = #{functionName,jdbcType=VARCHAR},
      permission_name = #{permissionName,jdbcType=VARCHAR},
      pid = #{pid,jdbcType=INTEGER},
      url = #{url,jdbcType=VARCHAR},
      level = #{level,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getFunctionsByRoleId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select a.role_id,b.id,b.function_name,b.create_time,b.permission_name
    ,b.pid,b.url,b.level from s_role_function a join s_function b on a.function_id = b.id where a.role_id =
    #{roleId,jdbcType=INTEGER}
  </select>


  <select id="getFunctionsByRolePid" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select a.role_id,b.id,b.function_name,b.create_time,b.permission_name
    ,b.pid,b.url,b.level from s_role_function a join s_function b on a.function_id = b.id
    <where>
      <if test="id!=null">a.role_id =
        #{id,jdbcType=INTEGER}</if>
      <if test="pId!=null"> and b.pid = #{pId,jdbcType=INTEGER} </if>
    </where>
  </select>

  <select id="getFunctionsByPid" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select     <include refid="Base_Column_List" />
    from s_function where FIND_IN_SET(id,getChildList(#{pid})) and level != 0
  </select>

  <select id="getFunctionsByPidPer" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select     <include refid="Base_Column_List" />
    from s_function where pid = #{pId,jdbcType=INTEGER}
  </select>

</mapper>